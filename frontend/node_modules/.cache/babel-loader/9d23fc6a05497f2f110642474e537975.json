{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoveScroll = void 0;\nvar tslib_1 = require(\"tslib\");\nvar React = tslib_1.__importStar(require(\"react\"));\nvar constants_1 = require(\"react-remove-scroll-bar/constants\");\nvar use_callback_ref_1 = require(\"use-callback-ref\");\nvar medium_1 = require(\"./medium\");\nvar nothing = function () {\n  return;\n};\n/**\n * Removes scrollbar from the page and contain the scroll within the Lock\n */\nvar RemoveScroll = React.forwardRef(function (props, parentRef) {\n  var ref = React.useRef(null);\n  var _a = React.useState({\n      onScrollCapture: nothing,\n      onWheelCapture: nothing,\n      onTouchMoveCapture: nothing\n    }),\n    callbacks = _a[0],\n    setCallbacks = _a[1];\n  var forwardProps = props.forwardProps,\n    children = props.children,\n    className = props.className,\n    removeScrollBar = props.removeScrollBar,\n    enabled = props.enabled,\n    shards = props.shards,\n    sideCar = props.sideCar,\n    noIsolation = props.noIsolation,\n    inert = props.inert,\n    allowPinchZoom = props.allowPinchZoom,\n    _b = props.as,\n    Container = _b === void 0 ? 'div' : _b,\n    gapMode = props.gapMode,\n    rest = tslib_1.__rest(props, [\"forwardProps\", \"children\", \"className\", \"removeScrollBar\", \"enabled\", \"shards\", \"sideCar\", \"noIsolation\", \"inert\", \"allowPinchZoom\", \"as\", \"gapMode\"]);\n  var SideCar = sideCar;\n  var containerRef = (0, use_callback_ref_1.useMergeRefs)([ref, parentRef]);\n  var containerProps = tslib_1.__assign(tslib_1.__assign({}, rest), callbacks);\n  return React.createElement(React.Fragment, null, enabled && React.createElement(SideCar, {\n    sideCar: medium_1.effectCar,\n    removeScrollBar: removeScrollBar,\n    shards: shards,\n    noIsolation: noIsolation,\n    inert: inert,\n    setCallbacks: setCallbacks,\n    allowPinchZoom: !!allowPinchZoom,\n    lockRef: ref,\n    gapMode: gapMode\n  }), forwardProps ? React.cloneElement(React.Children.only(children), tslib_1.__assign(tslib_1.__assign({}, containerProps), {\n    ref: containerRef\n  })) : React.createElement(Container, tslib_1.__assign({}, containerProps, {\n    className: className,\n    ref: containerRef\n  }), children));\n});\nexports.RemoveScroll = RemoveScroll;\nRemoveScroll.defaultProps = {\n  enabled: true,\n  removeScrollBar: true,\n  inert: false\n};\nRemoveScroll.classNames = {\n  fullWidth: constants_1.fullWidthClassName,\n  zeroRight: constants_1.zeroRightClassName\n};","map":null,"metadata":{},"sourceType":"script"}