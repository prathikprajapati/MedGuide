{"ast":null,"code":"'use strict';\n\nvar React = require('react');\nvar createCache = require('@emotion/cache');\nvar _extends = require('@babel/runtime/helpers/extends');\nvar weakMemoize = require('@emotion/weak-memoize');\nvar _isolatedHnrs_dist_emotionReact_isolatedHnrs = require('../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js');\nvar utils = require('@emotion/utils');\nvar serialize = require('@emotion/serialize');\nvar useInsertionEffectWithFallbacks = require('@emotion/use-insertion-effect-with-fallbacks');\nfunction _interopDefault(e) {\n  return e && e.__esModule ? e : {\n    'default': e\n  };\n}\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar createCache__default = /*#__PURE__*/_interopDefault(createCache);\nvar weakMemoize__default = /*#__PURE__*/_interopDefault(weakMemoize);\nvar isDevelopment = false;\nvar isBrowser = typeof document !== 'undefined';\n\n/* import { type EmotionCache } from '@emotion/utils' */\nvar EmotionCacheContext\n/*: React.Context<EmotionCache | null> */ = /* #__PURE__ */React__namespace.createContext(\n// we're doing this to avoid preconstruct's dead code elimination in this one case\n// because this module is primarily intended for the browser and node\n// but it's also required in react native and similar environments sometimes\n// and we could have a special build just for that\n// but this is much easier and the native packages\n// might use a different theme context in the future anyway\ntypeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache__default[\"default\"]({\n  key: 'css'\n}) : null);\nvar CacheProvider = EmotionCacheContext.Provider;\nvar __unsafe_useEmotionCache = function useEmotionCache() /*: EmotionCache | null*/\n{\n  return React.useContext(EmotionCacheContext);\n};\nexports.withEmotionCache = function withEmotionCache\n/* <Props, Ref: React.Ref<*>> */(func\n/*: (props: Props, cache: EmotionCache, ref: Ref) => React.Node */) /*: React.AbstractComponent<Props> */\n{\n  return /*#__PURE__*/React.forwardRef(function (props\n  /*: Props */, ref\n  /*: Ref */) {\n    // the cache will never be null in the browser\n    var cache = React.useContext(EmotionCacheContext);\n    return func(props, cache, ref);\n  });\n};\nif (!isBrowser) {\n  exports.withEmotionCache = function withEmotionCache\n  /* <Props> */(func\n  /*: (props: Props, cache: EmotionCache) => React.Node */) /*: React.StatelessFunctionalComponent<Props> */\n  {\n    return function (props\n    /*: Props */) {\n      var cache = React.useContext(EmotionCacheContext);\n      if (cache === null) {\n        // yes, we're potentially creating this on every render\n        // it doesn't actually matter though since it's only on the server\n        // so there will only every be a single render\n        // that could change in the future because of suspense and etc. but for now,\n        // this works and i don't want to optimise for a future thing that we aren't sure about\n        cache = createCache__default[\"default\"]({\n          key: 'css'\n        });\n        return /*#__PURE__*/React__namespace.createElement(EmotionCacheContext.Provider, {\n          value: cache\n        }, func(props, cache));\n      } else {\n        return func(props, cache);\n      }\n    };\n  };\n}\nvar ThemeContext = /* #__PURE__ */React__namespace.createContext({});\nvar useTheme = function useTheme() {\n  return React__namespace.useContext(ThemeContext);\n};\nvar getTheme = function getTheme(outerTheme\n/*: Object */, theme\n/*: Object | (Object => Object) */) {\n  if (typeof theme === 'function') {\n    var mergedTheme = theme(outerTheme);\n    return mergedTheme;\n  }\n  return _extends({}, outerTheme, theme);\n};\nvar createCacheWithTheme = /* #__PURE__ */weakMemoize__default[\"default\"](function (outerTheme) {\n  return weakMemoize__default[\"default\"](function (theme) {\n    return getTheme(outerTheme, theme);\n  });\n});\n/*\ntype ThemeProviderProps = {\n  theme: Object | (Object => Object),\n  children: React.Node\n}\n*/\n\nvar ThemeProvider = function ThemeProvider(props\n/*: ThemeProviderProps */) {\n  var theme = React__namespace.useContext(ThemeContext);\n  if (props.theme !== theme) {\n    theme = createCacheWithTheme(theme)(props.theme);\n  }\n  return /*#__PURE__*/React__namespace.createElement(ThemeContext.Provider, {\n    value: theme\n  }, props.children);\n};\nfunction withTheme\n/* <Config: {}> */(Component\n/*: React.AbstractComponent<Config> */) /*: React.AbstractComponent<$Diff<Config, { theme: Object }>> */\n{\n  var componentName = Component.displayName || Component.name || 'Component';\n  var render = function render(props, ref) {\n    var theme = React__namespace.useContext(ThemeContext);\n    return /*#__PURE__*/React__namespace.createElement(Component, _extends({\n      theme: theme,\n      ref: ref\n    }, props));\n  };\n  var WithTheme = /*#__PURE__*/React__namespace.forwardRef(render);\n  WithTheme.displayName = \"WithTheme(\" + componentName + \")\";\n  return _isolatedHnrs_dist_emotionReact_isolatedHnrs[\"default\"](WithTheme, Component);\n}\nvar hasOwn = {}.hasOwnProperty;\nvar typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';\nvar createEmotionProps = function createEmotionProps(type\n/*: React.ElementType */, props\n/*: Object */) {\n  var newProps\n  /*: any */ = {};\n  for (var key in props) {\n    if (hasOwn.call(props, key)) {\n      newProps[key] = props[key];\n    }\n  }\n  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:\n\n  return newProps;\n};\nvar Insertion = function Insertion(_ref) {\n  var cache = _ref.cache,\n    serialized = _ref.serialized,\n    isStringTag = _ref.isStringTag;\n  utils.registerStyles(cache, serialized, isStringTag);\n  var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function () {\n    return utils.insertStyles(cache, serialized, isStringTag);\n  });\n  if (!isBrowser && rules !== undefined) {\n    var _ref2;\n    var serializedNames = serialized.name;\n    var next = serialized.next;\n    while (next !== undefined) {\n      serializedNames += ' ' + next.name;\n      next = next.next;\n    }\n    return /*#__PURE__*/React__namespace.createElement(\"style\", (_ref2 = {}, _ref2[\"data-emotion\"] = cache.key + \" \" + serializedNames, _ref2.dangerouslySetInnerHTML = {\n      __html: rules\n    }, _ref2.nonce = cache.sheet.nonce, _ref2));\n  }\n  return null;\n};\nvar Emotion = /* #__PURE__ */exports.withEmotionCache(/* <any, any> */\nfunction (props, cache, ref) {\n  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works\n  // not passing the registered cache to serializeStyles because it would\n  // make certain babel optimisations not possible\n\n  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {\n    cssProp = cache.registered[cssProp];\n  }\n  var WrappedComponent = props[typePropName];\n  var registeredStyles = [cssProp];\n  var className = '';\n  if (typeof props.className === 'string') {\n    className = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);\n  } else if (props.className != null) {\n    className = props.className + \" \";\n  }\n  var serialized = serialize.serializeStyles(registeredStyles, undefined, React__namespace.useContext(ThemeContext));\n  className += cache.key + \"-\" + serialized.name;\n  var newProps = {};\n  for (var key in props) {\n    if (hasOwn.call(props, key) && key !== 'css' && key !== typePropName && !isDevelopment) {\n      newProps[key] = props[key];\n    }\n  }\n  newProps.className = className;\n  if (ref) {\n    newProps.ref = ref;\n  }\n  return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Insertion, {\n    cache: cache,\n    serialized: serialized,\n    isStringTag: typeof WrappedComponent === 'string'\n  }), /*#__PURE__*/React__namespace.createElement(WrappedComponent, newProps));\n});\nvar Emotion$1 = Emotion;\nexports.CacheProvider = CacheProvider;\nexports.Emotion = Emotion$1;\nexports.ThemeContext = ThemeContext;\nexports.ThemeProvider = ThemeProvider;\nexports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;\nexports.createEmotionProps = createEmotionProps;\nexports.hasOwn = hasOwn;\nexports.isBrowser = isBrowser;\nexports.isDevelopment = isDevelopment;\nexports.useTheme = useTheme;\nexports.withTheme = withTheme;","map":null,"metadata":{},"sourceType":"script"}